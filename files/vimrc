set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'Shougo/vimproc.vim'            " Vimproc is a great asynchronous execution library for Vim.
Plugin 'scrooloose/syntastic'          " Syntax checking plugin
Plugin 'tpope/vim-sleuth'              " This plugin automatically adjusts 'shiftwidth' and 'expandtab' heuristically based on the current file. In lieu of adjusting 'softtabstop', 'smarttab' is enabled.
Plugin 'tpope/vim-sensible'            " A universal set of defaults that (hopefully) everyone can agree on.
Plugin 'tpope/vim-surround'            " Surround.vim is all about 'surroundings': parentheses, brackets, quotes, XML tags, and more.
Plugin 'tpope/vim-commentary'          " Comment stuff out
Plugin 'tpope/vim-repeat'              " Remaps . in a way that plugins can tap into it.
Plugin 'tpope/vim-unimpaired'          " Complementary pairs of mappings
Plugin 'tpope/vim-endwise'             " This is a simple plugin that helps to end certain structures automatically. (ruby, cpp, objc, lua, vim, ...)
Plugin 'tpope/vim-dispatch'            " Leverage the power of Vim's compiler plugins without being bound by synchronicity.

Plugin 'godlygeek/tabular'             " Text alignment http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
Plugin 'ervandew/supertab'             " Supertab is a vim plugin which allows you to use <Tab> for all your insert completion needs (:help ins-completion).
Plugin 'editorconfig/editorconfig-vim' " :help editorconfig http://editorconfig.org/
" Plugin 'xolox/vim-misc'                " Basically it's an extended standard library of Vim script functions that I wrote during the development of my Vim profile and plug-ins.
" Plugin 'xolox/vim-easytags'            " Automated tag (ctags) generation and syntax highlighting in Vim

" Plugin 'Valloric/MatchTagAlways'       " Always highlight enclosing tags

Plugin 'tpope/vim-git'                 " Included are syntax, indent, and filetype plugin files for git, gitcommit, gitconfig, gitrebase, and gitsendemail.
Plugin 'tpope/vim-fugitive'            " The best Git wrapper of all time

" Colors ----------------------------
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'nanotech/jellybeans.vim'        " color scheme
Plugin 'morhetz/gruvbox'                " color scheme
" /Colors ---------------------------

" Vim navigation, buffers, search ---
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'jeetsukumaran/vim-buffergator' " Use `<Leader>b` to open a window listing all buffers
Plugin 'ctrlpvim/ctrlp.vim'            " Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
Plugin 'mbbill/undotree'               " <leader>q :UndotreeToggle (F5 - default)
Plugin 'mileszs/ack.vim'               " Ack-grep in vim. Ack can be used as a replacement for 99% of the uses of grep.
Plugin 'majutsushi/tagbar'             " Browse the tags of the current file and get an overview of its structure
" /Vim navigation -------------------

" Markup, notation, configs ---------
Plugin 'stephpy/vim-yaml'           " Override vim syntax for yaml files. Yaml files in vim 7.4 are really slow, due to core yaml syntax. This syntax is simpler/faster.
Plugin 'elzr/vim-json'              " Better JSON for VIM
Plugin 'plasticboy/vim-markdown'    " Syntax highlighting, matching rules and mappings for the original Markdown and extensions.
Plugin 'ekalinin/Dockerfile.vim'    " Vim syntax file for Docker's Dockerfile and snippets for snipMate.
" /Markup, notation -----------------

" HTML, CSS, preproc, template ------
Plugin 'othree/html5.vim'           " HTML5 + inline SVG omnicomplete function, indent and syntax for Vim.
Plugin 'qbbr/vim-twig'              " Twig syntax and snippets.
Plugin 'digitaltoad/vim-jade'       " Vim syntax highlighting for Jade templates.
Plugin 'groenewege/vim-less'
Plugin 'slim-template/vim-slim'
" /HTML, CSS ------------------------

" Lisp ------------------------------
Plugin 'vim-scripts/paredit.vim'    " Paredit performs structured editing of Lisp S-expressions in Vim
Plugin 'wlangstroth/vim-racket'
" /Lisp -----------------------------

" JS --------------------------------
Plugin 'moll/vim-node'
Plugin 'othree/yajs.vim'
Plugin 'othree/es.next.syntax.vim'
Plugin 'mxw/vim-jsx'
" Plugin 'pangloss/vim-javascript'
" Plugin 'facebook/vim-flow'
" /JS -------------------------------

" Ruby -------------------------------
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-bundler'
" /Ruby ------------------------------

" PHP --------------------------------
Plugin '2072/PHP-Indenting-for-VIm' " This is the official PHP indentation plug-in for VIm
Plugin 'joonty/vim-phpqa'           " Plugin that integrates PHP quality checking tools
Plugin 'mikehaertl/yii2-apidoc-vim' " Yii 2 API docs for Vim
" Plugin 'shawncplus/phpcomplete.vim' " Improved PHP omni-completion. Based on the default phpcomplete.vim. Namespace support ( Requires patched ctags )
" /PHP -------------------------------

" Snippets UltiSnips
Plugin 'SirVer/ultisnips'
Plugin 'mattn/emmet-vim'
" Vim Tmux Navigator
Plugin 'christoomey/vim-tmux-navigator'

call vundle#end()
syntax on
filetype on
filetype plugin indent on
filetype plugin on

let mapleader=","

" Sets how many lines of history VIM has to remember
set history=500

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" enhanced command completion
set wildmenu

set visualbell

if has('mouse')
  set mouse=a
endif

" Don't redraw while executing macros (good performance config)
set lazyredraw

set hidden
set nofoldenable

"set ttyscroll=10
"set encoding=utf-8
set nowrap
set number
set hlsearch
set ignorecase
set smartcase
" set showcmd

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

set expandtab
set shiftwidth=2
set softtabstop=2

autocmd FileType php,html,haml,erb,vim set colorcolumn=121
autocmd FileType ruby,javascript,slim,pug set colorcolumn=81

" get italics in gnome-terminal
" http://askubuntu.com/questions/492592/can-i-get-italics-in-gnome-terminal
set t_ZH=[3m
set t_ZR=[23m

set t_Co=256

" let g:jellybeans_use_term_italics = 1
" if !empty(glob("~/.vim/bundle/jellybeans.vim"))
"   colorscheme jellybeans
" endif

" set background=dark
let g:gruvbox_italic=1
if !empty(glob("~/.vim/bundle/gruvbox"))
  colorscheme gruvbox
endif

" PHP ---
hi! link phpVarSelector Identifier
let g:phpqa_codesniffer_cmd='/home/andrewko/.composer/vendor/bin/phpcs'
let g:phpqa_messdetector_cmd='/home/andrewko/.composer/vendor/phpmd/phpmd/src/bin/phpmd'
let g:phpqa_messdetector_autorun = 0
let g:phpqa_open_loc = 1
let g:phpqa_codesniffer_args = "--standard=PSR2"
" /PHP ---

" JavaScript ----------------
let g:jsx_ext_required = 0
let g:vim_json_syntax_conceal = 0
" autocmd BufRead,BufNewFile *.es6 setfiletype javascript
" /JavaScript ---------------

" Persistent Undo -----------
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif
" /Persistent Undo ----------

let g:vim_markdown_folding_disabled = 1

" let g:easytags_async = 1
" :autocmd FileType php let b:easytags_auto_highlight = 0

" Enable omni completion.
set omnifunc=syntaxcomplete#Complete
" ----------------------------------

autocmd FileType ruby compiler ruby

autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_use_bundler = 1

" UltiSnips"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
let g:UltiSnipsJumpBackwardTrigger="<C-z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:buffergator_viewport_split_policy = "B"
let g:buffergator_sort_regime = "mru"


" Syntastic ----------------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exec = 'eslint_d'
let s:eslint_path = system('PATH=$(npm bin):$PATH && which eslint')
let b:syntastic_javascript_eslint_exec = substitute(s:eslint_path, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')

" let g:syntastic_jade_checkers = ['jade_lint']

" let g:syntastic_ruby_checkers = ['rubocop', 'mri']
" let g:syntastic_ruby_rubocop_args = '--force-exclusion'
" let g:syntastic_ruby_checkers = ['reek']
let g:syntastic_ruby_checkers = ['mri']
let g:syntastic_haml_checkers = ['haml_lint']
let g:syntastic_slim_checkers = ['slim_lint']
"
let g:syntastic_scss_sass_args="--load-path /home/andrewko/.rvm/gems/ruby-2.3.1@rails4.2/gems/bootstrap-4.0.0.alpha3"



let g:syntastic_php_checkers=['php', 'phpcs']
let g:syntastic_php_phpcs_exec='~/.composer/vendor/bin/phpcs'
let g:syntastic_php_phpcs_args='--standard=PSR2 -n'

let g:syntastic_twig_twiglint_exec = 'php'
let g:syntastic_twig_twiglint_exe = '~/.composer/vendor/bin/twig-lint'
" Syntastic Toggle 'togglemod'
nmap <leader>s :SyntasticToggleMode<CR>
" /Syntastic ---------------------------------------

" Emmet --------------------------------------------
let g:user_emmet_leader_key='<C-e>'
" /Emmet -------------------------------------------

nmap <leader>m :TagbarToggle<CR>
nnoremap <leader>q :UndotreeToggle<CR>

" Dispatch -----------------------------------------
nnoremap <leader>di :Dispatch<CR>
autocmd FileType ruby let b:dispatch = 'ruby %'
autocmd FileType php let b:dispatch = 'phpunit %'
autocmd FileType javascript let b:dispatch = 'node %'
" /Dispatch ----------------------------------------

" Map ctrl-movement keys to window switching
map <C-k> <C-w><Up>
map <C-j> <C-w><Down>
map <C-l> <C-w><Right>
map <C-h> <C-w><Left>

" Toggle paste mode
nmap <silent> <F4> :set invpaste<CR>:set paste?<CR>
imap <silent> <F4> <ESC>:set invpaste<CR>:set paste?<CR>

" format the entire file
nnoremap <leader>fef :normal! gg=G``<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" upper/lower word
nmap <leader>u mQviwU`Q
nmap <leader>l mQviwu`Q

" Tabularize mappings ----------------------------------
" if exists(":Tabularize")
nmap <Leader>a> :Tabularize /=><CR>
vmap <Leader>a> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a== :Tabularize /==<CR>
vmap <Leader>a== :Tabularize /==<CR>
vmap <Leader>a, :Tabularize /',\zs.*<CR>
" endif
" /Tabularize mappings ----------------------------------

" Vim Tmux Navigator ------------------------------------
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
" nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>
" /Vim Tmux Navigator -----------------------------------

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <C-\> :NERDTreeFind<CR>
nmap <silent> <leader><leader> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.pyc$']

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('lock', 'Black', 'none', 'grey', '#151515')
call NERDTreeHighlightFile('yml', '141', 'none', '#af87ff', '#151515')
call NERDTreeHighlightFile('html', '73', 'none', '73', '#151515')
call NERDTreeHighlightFile('haml', '73', 'none', '73', '#151515')
call NERDTreeHighlightFile('jade', '73', 'none', '73', '#151515')
call NERDTreeHighlightFile('slim', '73', 'none', '73', '#151515')
" call NERDTreeHighlightFile('twig', '34', 'none', '#00af00', '#151515')
call NERDTreeHighlightFile('less', 'LightBlue', 'none', 'LightBlue', '#151515')
call NERDTreeHighlightFile('css', '77', 'none', '#5fd75f', '#151515')
call NERDTreeHighlightFile('js', '208', 'none', '#ffd75f', '#151515')
call NERDTreeHighlightFile('es6', '208', 'none', '#ffd75f', '#151515')
call NERDTreeHighlightFile('jsx', '33', 'none', '33', '#151515')
call NERDTreeHighlightFile('coffee', '31', 'none', '#ffd75f', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('rb', '167', 'none', '#d75f5f', '#151515')
call NERDTreeHighlightFile('erb', '147', 'none', '#afafff', '#151515')

map <Leader>n <plug>NERDTreeTabsToggle<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" reload current file
nmap <leader>r :edit<CR>

nmap <silent> // :nohlsearch<CR>
noremap ,hl :set hlsearch! hlsearch?<CR>

" Allows you to enter sudo pass and save the file
" when you forgot to open your file with sudo
cmap w!! %!sudo tee > /dev/null %

" Allow to copy/paste between VIM instances
" copy the current visual selection to ~/.vbuf
vmap <Leader>y :w! ~/.vbuf<CR>
"copy the current line to the buffer file if no visual selection
nmap <Leader>y :.w! ~/.vbuf<CR>
"paste the contents of the buffer file
nmap <Leader>p :r ~/.vbuf<CR>

" Automatically removing all trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" au BufRead,BufNewFile {Vagrantfile,Gemfile,Capfile} set ft=ruby
au BufRead,BufNewFile {.babelrc,composer.lock} set ft=json
au BufRead,BufNewFile {.bash_aliases,bash_aliases} set ft=sh

" spellcheck for commits
autocmd FileType gitcommit setlocal spell
autocmd FileType markdown setlocal spell

" comments types
autocmd FileType php setlocal commentstring=#\ %s
autocmd FileType slim setlocal commentstring=/\ %s
autocmd FileType pug setlocal commentstring=//-\ %s

if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif
